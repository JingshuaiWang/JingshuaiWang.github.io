<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[以高效的方式使用mac开发]]></title>
      <url>%2F2016%2F04%2F07%2Fmac%2F</url>
      <content type="text"><![CDATA[brewbrew是mac操作系统中包管理工具、等同于Linux系统中的apt-get、yum等 mac系统再带ruby需要gcc编译器支持（xcode集成）安装brew/usr/bin/ruby -e “$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)” 安装 brew caskbrew tap caskroom/cask pyenvpyenv是python多版本管理工具 安装pyenvbrew install pyenv安装python依赖brew install readline xz安装特定的python版本brew install 2.7.13 zsh终极shell 安装zshbrew isntall zsh iterm2终极终端 安装iterm2brew cask install iterm2 oh-my-zsh配置zsh 安装oh-my-zshsh -c “$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)” ipython交互式python 安装ipythonpip install ipython mysql常用关系型数据库 安装mysqlbrew install mysqlmysql.server startmysql.server stopmysql.server restart mongodb分布式文件存储的NoSQL数据库 安装mongodbbrew install mongodbmongodbuse admindb.shutdownServer()brew cask install robomongo redis内存级数据库存储、交互速度非常快、键值对形式存储brew install redisredis-serverredis-cli]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[配置django开发框架]]></title>
      <url>%2F2016%2F04%2F01%2Fdjango%2F</url>
      <content type="text"><![CDATA[创建虚拟开发环境 安装pyenvbrew install pyenv 安装pyenv-virtualbrew install ptenv-virtual 设置pyenv自动激活echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &gt;&gt; ~/.zshrc 创建virtualenvpyenv virtualenv 2.7.13 venv_django 列出所有python虚拟环境pyenv virtualenvs 激活python虚拟环境pyenv activate venv_django 安装django框架pip install django==1.8.2 安装django框架插件pip install celery==3.1.25 退出python虚拟环境pyenv deactivate venv_django 删除python虚拟环境pyenv uninstall venv_django 操作项目 创建项目django-admin startproject projectName 创建应用python manage.py startapp appName 配置settings.py` 初始化应用、模板、数据库、时区、语言、静态文件、中间件、 配置urls.py 创建模型类 注册模型类 生成迁移python manage.py makemigrations 执行迁移python manage.py migrate 运行django内置服务器python manage.py runserver]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Git]]></title>
      <url>%2F2015%2F06%2F01%2Fgit%2F</url>
      <content type="text"><![CDATA[linus linus在1991年创建开源linux，几年后成立linus社区linus用了两个星期时间为自己写了一个分布式版本控制系统，并流行起来linus信仰开源精神 分支 远程仓库至少有两个分支master、dev,本地仓库至少有三个分支master、dev、mine在mine分支中开发、合并到dev分支、并推送到远程仓库 安装 Xcode 8.0以后集成 gitbrew install git 关联本地与远程仓库 在github或者coding或者其它创建仓库git clone git push -u origin dev若没有关联、推送不成功、根据不成功的提示进行关联 常用命令: 从远程仓库某分支拉取项目git pull origin master 查看当前分支git branch创建dev分支并与远程仓库dev分支关联切换并创建工作分支git checkout -b mine 查看仓库当前状态git status对比文件修改前后git diff &lt;fileName&gt; 把修改文件添加到暂存区git add &lt;fileName&gt;放弃添加到暂存区git checkout -- &lt;fileName&gt; 把暂存区中内容提交到本地仓库git commit -m &quot;说明&quot; 切换到dev分支git checkout dev合并到本地仓库dev分支git merge 版本恢复git reset --hard &lt;commit_id&gt;git reset --hard HEAD^git reset --hard HEAD^^把本地仓库内容提交到远程仓库(推送前拉取)git push origin dev 标签: 创建标签git tag v1.0git tag -a v1.0 -m &quot;version 1.0 release&quot;为特定commit_id创建标签git tag -a v1.0 -m &quot;version 1.0 release&quot; commit_id 查看所有标签git tag查看标签下的内容git show v1.0 删除标签git tag -d v1.0git push origin :refs/tags/v1.0 推送标签git push origin v1.0git push origin --tags stash: 隐藏当前工作区内容git stash 查看隐藏工作区状态git stash list 恢复隐藏的工作区git stash applygit stash pop 其他命令: 查看历史命令git refloggit log 删除工作区文件git rm &lt;fileName&gt; 查看远程仓库信息git remote 参考资料廖雪峰的官方网站Git官方网站]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo]]></title>
      <url>%2F2015%2F05%2F01%2FHexo%2F</url>
      <content type="text"><![CDATA[什么是Hexo?1hexo是一个快速、简洁且高效的博客框架、，支持Markdown解析与渲染文章，用Node.js编写。 安装hexo123brew install nodebrew install gitnpm install -g hexo-cli 建站123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 部署 发布123hexo cleanhexo generatehexo deploy 参考资料hoex官方网站]]></content>
    </entry>

    
  
  
</search>
